name: Test and Release on Master Updates

on:
  pull_request:
    branches: [master] # Run tests on PR targeting master
  push:
    branches: [master] # Run tests and release on push to master
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup docker-compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
      - name: Build docker images
        run: docker compose build --no-cache
      - name: Run tests
        run: docker compose run --rm test

  release:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/master')
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(grep '^version' pyproject.toml | head -1 | cut -d '"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build distributions
        run: python -m build

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          body: Automatic release from merge to master
          draft: false
          prerelease: false

      - name: Upload Source Distribution (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/cpy-${{ steps.get_version.outputs.version }}.tar.gz
          asset_name: cpy-${{ steps.get_version.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Wheel Distribution (.whl)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/cpy-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_name: cpy-${{ steps.get_version.outputs.version }}-py3-none-any.whl
          asset_content_type: application/octet-stream

      - name: Download tarball for SHA256 calculation
        run: |
          curl -L -o cpy.tar.gz "https://github.com/Ameb8/cpy/releases/download/v${{ steps.get_version.outputs.version }}/cpy-${{ steps.get_version.outputs.version }}.tar.gz"

      - name: Calculate SHA256 checksum
        id: sha256
        run: |
          shasum -a 256 cpy.tar.gz | cut -d ' ' -f1 > sha256.txt
          echo "sha256=$(cat sha256.txt)" >> $GITHUB_OUTPUT

      - name: Checkout Homebrew tap repo
        uses: actions/checkout@v4
        with:
          repository: Ameb8/homebrew-tools
          token: ${{ secrets.HOMEBREW_PAT }}
          path: homebrew-tools

      - name: Update Homebrew formula with new version and sha256
        run: |
          FORMULA="homebrew-tools/Formula/cpy.rb"
          VERSION="${{ steps.get_version.outputs.version }}"
          SHA256="${{ steps.sha256.outputs.sha256 }}"

          # Update url line
          sed -i.bak "s|url \".*\"|url \"https://github.com/Ameb8/cpy/releases/download/v${VERSION}/cpy-${VERSION}.tar.gz\"|" "$FORMULA"
          # Update sha256 line
          sed -i.bak "s|sha256 \".*\"|sha256 \"$SHA256\"|" "$FORMULA"
          rm "$FORMULA.bak"

          # Check diff
          git --no-pager diff "$FORMULA"

      - name: Commit and push formula update
        run: |
          cd homebrew-tools/Formula
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          if git diff --quiet; then
            echo "No changes to commit"
          else # Update formula
            git add cpy.rb
            git commit -m "Update cpy to version ${VERSION}"
            git push origin main
          fi